package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"time"
)

// AwsAccountUpdateJob represents a row from 'trackit.aws_account_update_job'.
type AwsAccountUpdateJob struct {
	ID                      int            `json:"id"`                        // id
	AwsAccountID            int            `json:"aws_account_id"`            // aws_account_id
	Completed               time.Time      `json:"completed"`                 // completed
	WorkerID                string         `json:"worker_id"`                 // worker_id
	JobError                string         `json:"jobError"`                  // jobError
	RdsError                string         `json:"rdsError"`                  // rdsError
	Ec2error                string         `json:"ec2Error"`                  // ec2Error
	HistoryError            string         `json:"historyError"`              // historyError
	EsError                 string         `json:"esError"`                   // esError
	MonthlyReportsGenerated bool           `json:"monthly_reports_generated"` // monthly_reports_generated
	ElastiCacheError        string         `json:"elastiCacheError"`          // elastiCacheError
	LambdaError             string         `json:"lambdaError"`               // lambdaError
	RiEc2error              sql.NullString `json:"riEc2Error"`                // riEc2Error
	RiRdsError              string         `json:"riRdsError"`                // riRdsError
	OdToRiEc2error          string         `json:"odToRiEc2Error"`            // odToRiEc2Error
	EbsError                string         `json:"ebsError"`                  // ebsError
	StepFunctionError       string         `json:"stepFunctionError"`         // stepFunctionError
	S3error                 string         `json:"s3Error"`                   // s3Error
	SqsError                string         `json:"sqsError"`                  // sqsError
	CloudFormationError     string         `json:"cloudFormationError"`       // cloudFormationError
	Route53error            string         `json:"route53Error"`              // route53Error
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the AwsAccountUpdateJob exists in the database.
func (aauj *AwsAccountUpdateJob) Exists() bool {
	return aauj._exists
}

// Deleted returns true when the AwsAccountUpdateJob has been marked for deletion from
// the database.
func (aauj *AwsAccountUpdateJob) Deleted() bool {
	return aauj._deleted
}

// Insert inserts the AwsAccountUpdateJob to the database.
func (aauj *AwsAccountUpdateJob) Insert(db DB) error {
	switch {
	case aauj._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case aauj._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO trackit.aws_account_update_job (` +
		`aws_account_id, completed, worker_id, jobError, rdsError, ec2Error, historyError, esError, monthly_reports_generated, elastiCacheError, lambdaError, riEc2Error, riRdsError, odToRiEc2Error, ebsError, stepFunctionError, s3Error, sqsError, cloudFormationError, route53Error` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`
	// run
	logf(sqlstr, aauj.AwsAccountID, aauj.Completed, aauj.WorkerID, aauj.JobError, aauj.RdsError, aauj.Ec2error, aauj.HistoryError, aauj.EsError, aauj.MonthlyReportsGenerated, aauj.ElastiCacheError, aauj.LambdaError, aauj.RiEc2error, aauj.RiRdsError, aauj.OdToRiEc2error, aauj.EbsError, aauj.StepFunctionError, aauj.S3error, aauj.SqsError, aauj.CloudFormationError, aauj.Route53error)
	res, err := db.Exec(sqlstr, aauj.AwsAccountID, aauj.Completed, aauj.WorkerID, aauj.JobError, aauj.RdsError, aauj.Ec2error, aauj.HistoryError, aauj.EsError, aauj.MonthlyReportsGenerated, aauj.ElastiCacheError, aauj.LambdaError, aauj.RiEc2error, aauj.RiRdsError, aauj.OdToRiEc2error, aauj.EbsError, aauj.StepFunctionError, aauj.S3error, aauj.SqsError, aauj.CloudFormationError, aauj.Route53error)
	if err != nil {
		return err
	}
	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	} // set primary key
	aauj.ID = int(id)
	// set exists
	aauj._exists = true
	return nil
}

// Update updates a AwsAccountUpdateJob in the database.
func (aauj *AwsAccountUpdateJob) Update(db DB) error {
	switch {
	case !aauj._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case aauj._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE trackit.aws_account_update_job SET ` +
		`aws_account_id = ?, completed = ?, worker_id = ?, jobError = ?, rdsError = ?, ec2Error = ?, historyError = ?, esError = ?, monthly_reports_generated = ?, elastiCacheError = ?, lambdaError = ?, riEc2Error = ?, riRdsError = ?, odToRiEc2Error = ?, ebsError = ?, stepFunctionError = ?, s3Error = ?, sqsError = ?, cloudFormationError = ?, route53Error = ? ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, aauj.AwsAccountID, aauj.Completed, aauj.WorkerID, aauj.JobError, aauj.RdsError, aauj.Ec2error, aauj.HistoryError, aauj.EsError, aauj.MonthlyReportsGenerated, aauj.ElastiCacheError, aauj.LambdaError, aauj.RiEc2error, aauj.RiRdsError, aauj.OdToRiEc2error, aauj.EbsError, aauj.StepFunctionError, aauj.S3error, aauj.SqsError, aauj.CloudFormationError, aauj.Route53error, aauj.ID)
	if _, err := db.Exec(sqlstr, aauj.AwsAccountID, aauj.Completed, aauj.WorkerID, aauj.JobError, aauj.RdsError, aauj.Ec2error, aauj.HistoryError, aauj.EsError, aauj.MonthlyReportsGenerated, aauj.ElastiCacheError, aauj.LambdaError, aauj.RiEc2error, aauj.RiRdsError, aauj.OdToRiEc2error, aauj.EbsError, aauj.StepFunctionError, aauj.S3error, aauj.SqsError, aauj.CloudFormationError, aauj.Route53error, aauj.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the AwsAccountUpdateJob to the database.
func (aauj *AwsAccountUpdateJob) Save(db DB) error {
	if aauj.Exists() {
		return aauj.Update(db)
	}
	return aauj.Insert(db)
}

// Upsert performs an upsert for AwsAccountUpdateJob.
func (aauj *AwsAccountUpdateJob) Upsert(db DB) error {
	switch {
	case aauj._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO trackit.aws_account_update_job (` +
		`id, aws_account_id, completed, worker_id, jobError, rdsError, ec2Error, historyError, esError, monthly_reports_generated, elastiCacheError, lambdaError, riEc2Error, riRdsError, odToRiEc2Error, ebsError, stepFunctionError, s3Error, sqsError, cloudFormationError, route53Error` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)` +
		` ON DUPLICATE KEY UPDATE ` +
		`aws_account_id = VALUES(aws_account_id), completed = VALUES(completed), worker_id = VALUES(worker_id), jobError = VALUES(jobError), rdsError = VALUES(rdsError), ec2Error = VALUES(ec2Error), historyError = VALUES(historyError), esError = VALUES(esError), monthly_reports_generated = VALUES(monthly_reports_generated), elastiCacheError = VALUES(elastiCacheError), lambdaError = VALUES(lambdaError), riEc2Error = VALUES(riEc2Error), riRdsError = VALUES(riRdsError), odToRiEc2Error = VALUES(odToRiEc2Error), ebsError = VALUES(ebsError), stepFunctionError = VALUES(stepFunctionError), s3Error = VALUES(s3Error), sqsError = VALUES(sqsError), cloudFormationError = VALUES(cloudFormationError), route53Error = VALUES(route53Error)`
	// run
	logf(sqlstr, aauj.ID, aauj.AwsAccountID, aauj.Completed, aauj.WorkerID, aauj.JobError, aauj.RdsError, aauj.Ec2error, aauj.HistoryError, aauj.EsError, aauj.MonthlyReportsGenerated, aauj.ElastiCacheError, aauj.LambdaError, aauj.RiEc2error, aauj.RiRdsError, aauj.OdToRiEc2error, aauj.EbsError, aauj.StepFunctionError, aauj.S3error, aauj.SqsError, aauj.CloudFormationError, aauj.Route53error)
	if _, err := db.Exec(sqlstr, aauj.ID, aauj.AwsAccountID, aauj.Completed, aauj.WorkerID, aauj.JobError, aauj.RdsError, aauj.Ec2error, aauj.HistoryError, aauj.EsError, aauj.MonthlyReportsGenerated, aauj.ElastiCacheError, aauj.LambdaError, aauj.RiEc2error, aauj.RiRdsError, aauj.OdToRiEc2error, aauj.EbsError, aauj.StepFunctionError, aauj.S3error, aauj.SqsError, aauj.CloudFormationError, aauj.Route53error); err != nil {
		return err
	}
	// set exists
	aauj._exists = true
	return nil
}

// Delete deletes the AwsAccountUpdateJob from the database.
func (aauj *AwsAccountUpdateJob) Delete(db DB) error {
	switch {
	case !aauj._exists: // doesn't exist
		return nil
	case aauj._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM trackit.aws_account_update_job ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, aauj.ID)
	if _, err := db.Exec(sqlstr, aauj.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	aauj._deleted = true
	return nil
}

// AwsAccountUpdateJobByID retrieves a row from 'trackit.aws_account_update_job' as a AwsAccountUpdateJob.
//
// Generated from index 'aws_account_update_job_id_pkey'.
func AwsAccountUpdateJobByID(db DB, id int) (*AwsAccountUpdateJob, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, aws_account_id, completed, worker_id, jobError, rdsError, ec2Error, historyError, esError, monthly_reports_generated, elastiCacheError, lambdaError, riEc2Error, riRdsError, odToRiEc2Error, ebsError, stepFunctionError, s3Error, sqsError, cloudFormationError, route53Error ` +
		`FROM trackit.aws_account_update_job ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, id)
	aauj := AwsAccountUpdateJob{
		_exists: true,
	}
	if err := db.QueryRow(sqlstr, id).Scan(&aauj.ID, &aauj.AwsAccountID, &aauj.Completed, &aauj.WorkerID, &aauj.JobError, &aauj.RdsError, &aauj.Ec2error, &aauj.HistoryError, &aauj.EsError, &aauj.MonthlyReportsGenerated, &aauj.ElastiCacheError, &aauj.LambdaError, &aauj.RiEc2error, &aauj.RiRdsError, &aauj.OdToRiEc2error, &aauj.EbsError, &aauj.StepFunctionError, &aauj.S3error, &aauj.SqsError, &aauj.CloudFormationError, &aauj.Route53error); err != nil {
		return nil, logerror(err)
	}
	return &aauj, nil
}

// AwsAccountUpdateJobByAwsAccountID retrieves a row from 'trackit.aws_account_update_job' as a AwsAccountUpdateJob.
//
// Generated from index 'foreign_aws_account'.
func AwsAccountUpdateJobByAwsAccountID(db DB, awsAccountID int) ([]*AwsAccountUpdateJob, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, aws_account_id, completed, worker_id, jobError, rdsError, ec2Error, historyError, esError, monthly_reports_generated, elastiCacheError, lambdaError, riEc2Error, riRdsError, odToRiEc2Error, ebsError, stepFunctionError, s3Error, sqsError, cloudFormationError, route53Error ` +
		`FROM trackit.aws_account_update_job ` +
		`WHERE aws_account_id = ?`
	// run
	logf(sqlstr, awsAccountID)
	rows, err := db.Query(sqlstr, awsAccountID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*AwsAccountUpdateJob
	for rows.Next() {
		aauj := AwsAccountUpdateJob{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&aauj.ID, &aauj.AwsAccountID, &aauj.Completed, &aauj.WorkerID, &aauj.JobError, &aauj.RdsError, &aauj.Ec2error, &aauj.HistoryError, &aauj.EsError, &aauj.MonthlyReportsGenerated, &aauj.ElastiCacheError, &aauj.LambdaError, &aauj.RiEc2error, &aauj.RiRdsError, &aauj.OdToRiEc2error, &aauj.EbsError, &aauj.StepFunctionError, &aauj.S3error, &aauj.SqsError, &aauj.CloudFormationError, &aauj.Route53error); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &aauj)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// AwsAccount returns the AwsAccount associated with the AwsAccountUpdateJob's (AwsAccountID).
//
// Generated from foreign key 'aws_account_update_job_ibfk_1'.
func (aauj *AwsAccountUpdateJob) AwsAccount(db DB) (*AwsAccount, error) {
	return AwsAccountByID(db, aauj.AwsAccountID)
}
