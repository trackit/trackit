package models

// Code generated by xo. DO NOT EDIT.

import (
	"time"
)

// EmailedAnomaly represents a row from 'trackit.emailed_anomaly'.
type EmailedAnomaly struct {
	ID           int       `json:"id"`             // id
	AwsAccountID int       `json:"aws_account_id"` // aws_account_id
	Product      string    `json:"product"`        // product
	Recipient    string    `json:"recipient"`      // recipient
	Date         time.Time `json:"date"`           // date
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the EmailedAnomaly exists in the database.
func (ea *EmailedAnomaly) Exists() bool {
	return ea._exists
}

// Deleted returns true when the EmailedAnomaly has been marked for deletion from
// the database.
func (ea *EmailedAnomaly) Deleted() bool {
	return ea._deleted
}

// Insert inserts the EmailedAnomaly to the database.
func (ea *EmailedAnomaly) Insert(db DB) error {
	switch {
	case ea._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case ea._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO trackit.emailed_anomaly (` +
		`aws_account_id, product, recipient, date` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)`
	// run
	logf(sqlstr, ea.AwsAccountID, ea.Product, ea.Recipient, ea.Date)
	res, err := db.Exec(sqlstr, ea.AwsAccountID, ea.Product, ea.Recipient, ea.Date)
	if err != nil {
		return err
	}
	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	} // set primary key
	ea.ID = int(id)
	// set exists
	ea._exists = true
	return nil
}

// Update updates a EmailedAnomaly in the database.
func (ea *EmailedAnomaly) Update(db DB) error {
	switch {
	case !ea._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case ea._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE trackit.emailed_anomaly SET ` +
		`aws_account_id = ?, product = ?, recipient = ?, date = ? ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, ea.AwsAccountID, ea.Product, ea.Recipient, ea.Date, ea.ID)
	if _, err := db.Exec(sqlstr, ea.AwsAccountID, ea.Product, ea.Recipient, ea.Date, ea.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the EmailedAnomaly to the database.
func (ea *EmailedAnomaly) Save(db DB) error {
	if ea.Exists() {
		return ea.Update(db)
	}
	return ea.Insert(db)
}

// Upsert performs an upsert for EmailedAnomaly.
func (ea *EmailedAnomaly) Upsert(db DB) error {
	switch {
	case ea._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO trackit.emailed_anomaly (` +
		`id, aws_account_id, product, recipient, date` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)` +
		` ON DUPLICATE KEY UPDATE ` +
		`aws_account_id = VALUES(aws_account_id), product = VALUES(product), recipient = VALUES(recipient), date = VALUES(date)`
	// run
	logf(sqlstr, ea.ID, ea.AwsAccountID, ea.Product, ea.Recipient, ea.Date)
	if _, err := db.Exec(sqlstr, ea.ID, ea.AwsAccountID, ea.Product, ea.Recipient, ea.Date); err != nil {
		return err
	}
	// set exists
	ea._exists = true
	return nil
}

// Delete deletes the EmailedAnomaly from the database.
func (ea *EmailedAnomaly) Delete(db DB) error {
	switch {
	case !ea._exists: // doesn't exist
		return nil
	case ea._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM trackit.emailed_anomaly ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, ea.ID)
	if _, err := db.Exec(sqlstr, ea.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	ea._deleted = true
	return nil
}

// EmailedAnomalyByID retrieves a row from 'trackit.emailed_anomaly' as a EmailedAnomaly.
//
// Generated from index 'emailed_anomaly_id_pkey'.
func EmailedAnomalyByID(db DB, id int) (*EmailedAnomaly, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, aws_account_id, product, recipient, date ` +
		`FROM trackit.emailed_anomaly ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, id)
	ea := EmailedAnomaly{
		_exists: true,
	}
	if err := db.QueryRow(sqlstr, id).Scan(&ea.ID, &ea.AwsAccountID, &ea.Product, &ea.Recipient, &ea.Date); err != nil {
		return nil, logerror(err)
	}
	return &ea, nil
}

// EmailedAnomalyByAwsAccountID retrieves a row from 'trackit.emailed_anomaly' as a EmailedAnomaly.
//
// Generated from index 'foreign_aws_account'.
func EmailedAnomalyByAwsAccountID(db DB, awsAccountID int) ([]*EmailedAnomaly, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, aws_account_id, product, recipient, date ` +
		`FROM trackit.emailed_anomaly ` +
		`WHERE aws_account_id = ?`
	// run
	logf(sqlstr, awsAccountID)
	rows, err := db.Query(sqlstr, awsAccountID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*EmailedAnomaly
	for rows.Next() {
		ea := EmailedAnomaly{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&ea.ID, &ea.AwsAccountID, &ea.Product, &ea.Recipient, &ea.Date); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &ea)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// AwsAccount returns the AwsAccount associated with the EmailedAnomaly's (AwsAccountID).
//
// Generated from foreign key 'emailed_anomaly_ibfk_1'.
func (ea *EmailedAnomaly) AwsAccount(db DB) (*AwsAccount, error) {
	return AwsAccountByID(db, ea.AwsAccountID)
}
