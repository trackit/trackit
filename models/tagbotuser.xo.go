// Package models contains the types for schema 'trackit'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
)

// TagbotUser represents a row from 'trackit.tagbot_user'.
type TagbotUser struct {
	ID                        int    `json:"id"`                          // id
	UserID                    int    `json:"user_id"`                     // user_id
	AwsCustomerIdentifier     string `json:"aws_customer_identifier"`     // aws_customer_identifier
	AwsCustomerEntitlement    bool   `json:"aws_customer_entitlement"`    // aws_customer_entitlement
	StripeCustomerIdentifier  string `json:"stripe_customer_identifier"`  // stripe_customer_identifier
	StripeCustomerEntitlement bool   `json:"stripe_customer_entitlement"` // stripe_customer_entitlement

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the TagbotUser exists in the database.
func (tu *TagbotUser) Exists() bool {
	return tu._exists
}

// Deleted provides information if the TagbotUser has been deleted from the database.
func (tu *TagbotUser) Deleted() bool {
	return tu._deleted
}

// Insert inserts the TagbotUser to the database.
func (tu *TagbotUser) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if tu._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO trackit.tagbot_user (` +
		`user_id, aws_customer_identifier, aws_customer_entitlement, stripe_customer_identifier, stripe_customer_entitlement` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, tu.UserID, tu.AwsCustomerIdentifier, tu.AwsCustomerEntitlement, tu.StripeCustomerIdentifier, tu.StripeCustomerEntitlement)
	res, err := db.Exec(sqlstr, tu.UserID, tu.AwsCustomerIdentifier, tu.AwsCustomerEntitlement, tu.StripeCustomerIdentifier, tu.StripeCustomerEntitlement)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	tu.ID = int(id)
	tu._exists = true

	return nil
}

// Update updates the TagbotUser in the database.
func (tu *TagbotUser) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !tu._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if tu._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE trackit.tagbot_user SET ` +
		`user_id = ?, aws_customer_identifier = ?, aws_customer_entitlement = ?, stripe_customer_identifier = ?, stripe_customer_entitlement = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, tu.UserID, tu.AwsCustomerIdentifier, tu.AwsCustomerEntitlement, tu.StripeCustomerIdentifier, tu.StripeCustomerEntitlement, tu.ID)
	_, err = db.Exec(sqlstr, tu.UserID, tu.AwsCustomerIdentifier, tu.AwsCustomerEntitlement, tu.StripeCustomerIdentifier, tu.StripeCustomerEntitlement, tu.ID)
	return err
}

// Save saves the TagbotUser to the database.
func (tu *TagbotUser) Save(db XODB) error {
	if tu.Exists() {
		return tu.Update(db)
	}

	return tu.Insert(db)
}

// Delete deletes the TagbotUser from the database.
func (tu *TagbotUser) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !tu._exists {
		return nil
	}

	// if deleted, bail
	if tu._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM trackit.tagbot_user WHERE id = ?`

	// run query
	XOLog(sqlstr, tu.ID)
	_, err = db.Exec(sqlstr, tu.ID)
	if err != nil {
		return err
	}

	// set deleted
	tu._deleted = true

	return nil
}

// User returns the User associated with the TagbotUser's UserID (user_id).
//
// Generated from foreign key 'tagbot_user_ibfk_1'.
func (tu *TagbotUser) User(db XODB) (*User, error) {
	return UserByID(db, tu.UserID)
}

// TagbotUserByID retrieves a row from 'trackit.tagbot_user' as a TagbotUser.
//
// Generated from index 'tagbot_user_id_pkey'.
func TagbotUserByID(db XODB, id int) (*TagbotUser, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, user_id, aws_customer_identifier, aws_customer_entitlement, stripe_customer_identifier, stripe_customer_entitlement ` +
		`FROM trackit.tagbot_user ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	tu := TagbotUser{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&tu.ID, &tu.UserID, &tu.AwsCustomerIdentifier, &tu.AwsCustomerEntitlement, &tu.StripeCustomerIdentifier, &tu.StripeCustomerEntitlement)
	if err != nil {
		return nil, err
	}

	return &tu, nil
}

// TagbotUserByUserID retrieves a row from 'trackit.tagbot_user' as a TagbotUser.
//
// Generated from index 'user_id'.
func TagbotUserByUserID(db XODB, userID int) (*TagbotUser, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, user_id, aws_customer_identifier, aws_customer_entitlement, stripe_customer_identifier, stripe_customer_entitlement ` +
		`FROM trackit.tagbot_user ` +
		`WHERE user_id = ?`

	// run query
	XOLog(sqlstr, userID)
	tu := TagbotUser{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, userID).Scan(&tu.ID, &tu.UserID, &tu.AwsCustomerIdentifier, &tu.AwsCustomerEntitlement, &tu.StripeCustomerIdentifier, &tu.StripeCustomerEntitlement)
	if err != nil {
		return nil, err
	}

	return &tu, nil
}
