package models

// Code generated by xo. DO NOT EDIT.

import (
	"time"
)

// UpdateEsMappingsJob represents a row from 'trackit.update_es_mappings_job'.
type UpdateEsMappingsJob struct {
	ID        int       `json:"id"`        // id
	Completed time.Time `json:"completed"` // completed
	WorkerID  string    `json:"worker_id"` // worker_id
	JobError  string    `json:"job_error"` // job_error
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the UpdateEsMappingsJob exists in the database.
func (uemj *UpdateEsMappingsJob) Exists() bool {
	return uemj._exists
}

// Deleted returns true when the UpdateEsMappingsJob has been marked for deletion from
// the database.
func (uemj *UpdateEsMappingsJob) Deleted() bool {
	return uemj._deleted
}

// Insert inserts the UpdateEsMappingsJob to the database.
func (uemj *UpdateEsMappingsJob) Insert(db DB) error {
	switch {
	case uemj._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case uemj._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO trackit.update_es_mappings_job (` +
		`completed, worker_id, job_error` +
		`) VALUES (` +
		`?, ?, ?` +
		`)`
	// run
	logf(sqlstr, uemj.Completed, uemj.WorkerID, uemj.JobError)
	res, err := db.Exec(sqlstr, uemj.Completed, uemj.WorkerID, uemj.JobError)
	if err != nil {
		return err
	}
	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	} // set primary key
	uemj.ID = int(id)
	// set exists
	uemj._exists = true
	return nil
}

// Update updates a UpdateEsMappingsJob in the database.
func (uemj *UpdateEsMappingsJob) Update(db DB) error {
	switch {
	case !uemj._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case uemj._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE trackit.update_es_mappings_job SET ` +
		`completed = ?, worker_id = ?, job_error = ? ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, uemj.Completed, uemj.WorkerID, uemj.JobError, uemj.ID)
	if _, err := db.Exec(sqlstr, uemj.Completed, uemj.WorkerID, uemj.JobError, uemj.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the UpdateEsMappingsJob to the database.
func (uemj *UpdateEsMappingsJob) Save(db DB) error {
	if uemj.Exists() {
		return uemj.Update(db)
	}
	return uemj.Insert(db)
}

// Upsert performs an upsert for UpdateEsMappingsJob.
func (uemj *UpdateEsMappingsJob) Upsert(db DB) error {
	switch {
	case uemj._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO trackit.update_es_mappings_job (` +
		`id, completed, worker_id, job_error` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)` +
		` ON DUPLICATE KEY UPDATE ` +
		`completed = VALUES(completed), worker_id = VALUES(worker_id), job_error = VALUES(job_error)`
	// run
	logf(sqlstr, uemj.ID, uemj.Completed, uemj.WorkerID, uemj.JobError)
	if _, err := db.Exec(sqlstr, uemj.ID, uemj.Completed, uemj.WorkerID, uemj.JobError); err != nil {
		return err
	}
	// set exists
	uemj._exists = true
	return nil
}

// Delete deletes the UpdateEsMappingsJob from the database.
func (uemj *UpdateEsMappingsJob) Delete(db DB) error {
	switch {
	case !uemj._exists: // doesn't exist
		return nil
	case uemj._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM trackit.update_es_mappings_job ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, uemj.ID)
	if _, err := db.Exec(sqlstr, uemj.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	uemj._deleted = true
	return nil
}

// UpdateEsMappingsJobByID retrieves a row from 'trackit.update_es_mappings_job' as a UpdateEsMappingsJob.
//
// Generated from index 'update_es_mappings_job_id_pkey'.
func UpdateEsMappingsJobByID(db DB, id int) (*UpdateEsMappingsJob, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, completed, worker_id, job_error ` +
		`FROM trackit.update_es_mappings_job ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, id)
	uemj := UpdateEsMappingsJob{
		_exists: true,
	}
	if err := db.QueryRow(sqlstr, id).Scan(&uemj.ID, &uemj.Completed, &uemj.WorkerID, &uemj.JobError); err != nil {
		return nil, logerror(err)
	}
	return &uemj, nil
}
