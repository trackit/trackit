package models

// Code generated by xo. DO NOT EDIT.

import (
	"time"
)

// AwsAccountPluginsJob represents a row from 'trackit.aws_account_plugins_job'.
type AwsAccountPluginsJob struct {
	ID           int       `json:"id"`             // id
	AwsAccountID int       `json:"aws_account_id"` // aws_account_id
	Completed    time.Time `json:"completed"`      // completed
	WorkerID     string    `json:"worker_id"`      // worker_id
	JobError     string    `json:"jobError"`       // jobError
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [AwsAccountPluginsJob] exists in the database.
func (aapj *AwsAccountPluginsJob) Exists() bool {
	return aapj._exists
}

// Deleted returns true when the [AwsAccountPluginsJob] has been marked for deletion
// from the database.
func (aapj *AwsAccountPluginsJob) Deleted() bool {
	return aapj._deleted
}

// Insert inserts the [AwsAccountPluginsJob] to the database.
func (aapj *AwsAccountPluginsJob) Insert(db DB) error {
	switch {
	case aapj._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case aapj._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO trackit.aws_account_plugins_job (` +
		`aws_account_id, completed, worker_id, jobError` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)`
	// run
	logf(sqlstr, aapj.AwsAccountID, aapj.Completed, aapj.WorkerID, aapj.JobError)
	res, err := db.Exec(sqlstr, aapj.AwsAccountID, aapj.Completed, aapj.WorkerID, aapj.JobError)
	if err != nil {
		return logerror(err)
	}
	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return logerror(err)
	} // set primary key
	aapj.ID = int(id)
	// set exists
	aapj._exists = true
	return nil
}

// Update updates a [AwsAccountPluginsJob] in the database.
func (aapj *AwsAccountPluginsJob) Update(db DB) error {
	switch {
	case !aapj._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case aapj._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE trackit.aws_account_plugins_job SET ` +
		`aws_account_id = ?, completed = ?, worker_id = ?, jobError = ? ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, aapj.AwsAccountID, aapj.Completed, aapj.WorkerID, aapj.JobError, aapj.ID)
	if _, err := db.Exec(sqlstr, aapj.AwsAccountID, aapj.Completed, aapj.WorkerID, aapj.JobError, aapj.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [AwsAccountPluginsJob] to the database.
func (aapj *AwsAccountPluginsJob) Save(db DB) error {
	if aapj.Exists() {
		return aapj.Update(db)
	}
	return aapj.Insert(db)
}

// Upsert performs an upsert for [AwsAccountPluginsJob].
func (aapj *AwsAccountPluginsJob) Upsert(db DB) error {
	switch {
	case aapj._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO trackit.aws_account_plugins_job (` +
		`id, aws_account_id, completed, worker_id, jobError` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)` +
		` ON DUPLICATE KEY UPDATE ` +
		`aws_account_id = VALUES(aws_account_id), completed = VALUES(completed), worker_id = VALUES(worker_id), jobError = VALUES(jobError)`
	// run
	logf(sqlstr, aapj.ID, aapj.AwsAccountID, aapj.Completed, aapj.WorkerID, aapj.JobError)
	if _, err := db.Exec(sqlstr, aapj.ID, aapj.AwsAccountID, aapj.Completed, aapj.WorkerID, aapj.JobError); err != nil {
		return logerror(err)
	}
	// set exists
	aapj._exists = true
	return nil
}

// Delete deletes the [AwsAccountPluginsJob] from the database.
func (aapj *AwsAccountPluginsJob) Delete(db DB) error {
	switch {
	case !aapj._exists: // doesn't exist
		return nil
	case aapj._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM trackit.aws_account_plugins_job ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, aapj.ID)
	if _, err := db.Exec(sqlstr, aapj.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	aapj._deleted = true
	return nil
}

// AwsAccountPluginsJobByID retrieves a row from 'trackit.aws_account_plugins_job' as a [AwsAccountPluginsJob].
//
// Generated from index 'aws_account_plugins_job_id_pkey'.
func AwsAccountPluginsJobByID(db DB, id int) (*AwsAccountPluginsJob, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, aws_account_id, completed, worker_id, jobError ` +
		`FROM trackit.aws_account_plugins_job ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, id)
	aapj := AwsAccountPluginsJob{
		_exists: true,
	}
	if err := db.QueryRow(sqlstr, id).Scan(&aapj.ID, &aapj.AwsAccountID, &aapj.Completed, &aapj.WorkerID, &aapj.JobError); err != nil {
		return nil, logerror(err)
	}
	return &aapj, nil
}

// AwsAccountPluginsJobByAwsAccountID retrieves a row from 'trackit.aws_account_plugins_job' as a [AwsAccountPluginsJob].
//
// Generated from index 'foreign_aws_account'.
func AwsAccountPluginsJobByAwsAccountID(db DB, awsAccountID int) ([]*AwsAccountPluginsJob, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, aws_account_id, completed, worker_id, jobError ` +
		`FROM trackit.aws_account_plugins_job ` +
		`WHERE aws_account_id = ?`
	// run
	logf(sqlstr, awsAccountID)
	rows, err := db.Query(sqlstr, awsAccountID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*AwsAccountPluginsJob
	for rows.Next() {
		aapj := AwsAccountPluginsJob{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&aapj.ID, &aapj.AwsAccountID, &aapj.Completed, &aapj.WorkerID, &aapj.JobError); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &aapj)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// AwsAccount returns the AwsAccount associated with the [AwsAccountPluginsJob]'s (AwsAccountID).
//
// Generated from foreign key 'aws_account_plugins_job_ibfk_1'.
func (aapj *AwsAccountPluginsJob) AwsAccount(db DB) (*AwsAccount, error) {
	return AwsAccountByID(db, aapj.AwsAccountID)
}
