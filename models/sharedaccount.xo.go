package models

// Code generated by xo. DO NOT EDIT.

// SharedAccount represents a row from 'trackit.shared_account'.
type SharedAccount struct {
	ID              int  `json:"id"`               // id
	AccountID       int  `json:"account_id"`       // account_id
	UserID          int  `json:"user_id"`          // user_id
	UserPermission  int  `json:"user_permission"`  // user_permission
	SharingAccepted bool `json:"sharing_accepted"` // sharing_accepted
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [SharedAccount] exists in the database.
func (sa *SharedAccount) Exists() bool {
	return sa._exists
}

// Deleted returns true when the [SharedAccount] has been marked for deletion
// from the database.
func (sa *SharedAccount) Deleted() bool {
	return sa._deleted
}

// Insert inserts the [SharedAccount] to the database.
func (sa *SharedAccount) Insert(db DB) error {
	switch {
	case sa._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case sa._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO trackit.shared_account (` +
		`account_id, user_id, user_permission, sharing_accepted` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)`
	// run
	logf(sqlstr, sa.AccountID, sa.UserID, sa.UserPermission, sa.SharingAccepted)
	res, err := db.Exec(sqlstr, sa.AccountID, sa.UserID, sa.UserPermission, sa.SharingAccepted)
	if err != nil {
		return logerror(err)
	}
	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return logerror(err)
	} // set primary key
	sa.ID = int(id)
	// set exists
	sa._exists = true
	return nil
}

// Update updates a [SharedAccount] in the database.
func (sa *SharedAccount) Update(db DB) error {
	switch {
	case !sa._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case sa._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE trackit.shared_account SET ` +
		`account_id = ?, user_id = ?, user_permission = ?, sharing_accepted = ? ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, sa.AccountID, sa.UserID, sa.UserPermission, sa.SharingAccepted, sa.ID)
	if _, err := db.Exec(sqlstr, sa.AccountID, sa.UserID, sa.UserPermission, sa.SharingAccepted, sa.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [SharedAccount] to the database.
func (sa *SharedAccount) Save(db DB) error {
	if sa.Exists() {
		return sa.Update(db)
	}
	return sa.Insert(db)
}

// Upsert performs an upsert for [SharedAccount].
func (sa *SharedAccount) Upsert(db DB) error {
	switch {
	case sa._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO trackit.shared_account (` +
		`id, account_id, user_id, user_permission, sharing_accepted` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)` +
		` ON DUPLICATE KEY UPDATE ` +
		`account_id = VALUES(account_id), user_id = VALUES(user_id), user_permission = VALUES(user_permission), sharing_accepted = VALUES(sharing_accepted)`
	// run
	logf(sqlstr, sa.ID, sa.AccountID, sa.UserID, sa.UserPermission, sa.SharingAccepted)
	if _, err := db.Exec(sqlstr, sa.ID, sa.AccountID, sa.UserID, sa.UserPermission, sa.SharingAccepted); err != nil {
		return logerror(err)
	}
	// set exists
	sa._exists = true
	return nil
}

// Delete deletes the [SharedAccount] from the database.
func (sa *SharedAccount) Delete(db DB) error {
	switch {
	case !sa._exists: // doesn't exist
		return nil
	case sa._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM trackit.shared_account ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, sa.ID)
	if _, err := db.Exec(sqlstr, sa.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	sa._deleted = true
	return nil
}

// SharedAccountByAccountID retrieves a row from 'trackit.shared_account' as a [SharedAccount].
//
// Generated from index 'foreign_aws_account'.
func SharedAccountByAccountID(db DB, accountID int) ([]*SharedAccount, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, account_id, user_id, user_permission, sharing_accepted ` +
		`FROM trackit.shared_account ` +
		`WHERE account_id = ?`
	// run
	logf(sqlstr, accountID)
	rows, err := db.Query(sqlstr, accountID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*SharedAccount
	for rows.Next() {
		sa := SharedAccount{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&sa.ID, &sa.AccountID, &sa.UserID, &sa.UserPermission, &sa.SharingAccepted); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &sa)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// SharedAccountByUserID retrieves a row from 'trackit.shared_account' as a [SharedAccount].
//
// Generated from index 'foreign_user_id'.
func SharedAccountByUserID(db DB, userID int) ([]*SharedAccount, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, account_id, user_id, user_permission, sharing_accepted ` +
		`FROM trackit.shared_account ` +
		`WHERE user_id = ?`
	// run
	logf(sqlstr, userID)
	rows, err := db.Query(sqlstr, userID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*SharedAccount
	for rows.Next() {
		sa := SharedAccount{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&sa.ID, &sa.AccountID, &sa.UserID, &sa.UserPermission, &sa.SharingAccepted); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &sa)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// SharedAccountByID retrieves a row from 'trackit.shared_account' as a [SharedAccount].
//
// Generated from index 'shared_account_id_pkey'.
func SharedAccountByID(db DB, id int) (*SharedAccount, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, account_id, user_id, user_permission, sharing_accepted ` +
		`FROM trackit.shared_account ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, id)
	sa := SharedAccount{
		_exists: true,
	}
	if err := db.QueryRow(sqlstr, id).Scan(&sa.ID, &sa.AccountID, &sa.UserID, &sa.UserPermission, &sa.SharingAccepted); err != nil {
		return nil, logerror(err)
	}
	return &sa, nil
}

// AwsAccount returns the AwsAccount associated with the [SharedAccount]'s (AccountID).
//
// Generated from foreign key 'shared_account_ibfk_1'.
func (sa *SharedAccount) AwsAccount(db DB) (*AwsAccount, error) {
	return AwsAccountByID(db, sa.AccountID)
}

// User returns the User associated with the [SharedAccount]'s (UserID).
//
// Generated from foreign key 'shared_account_ibfk_2'.
func (sa *SharedAccount) User(db DB) (*User, error) {
	return UserByID(db, sa.UserID)
}
