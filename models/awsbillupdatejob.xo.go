package models

// Code generated by xo. DO NOT EDIT.

import (
	"time"
)

// AwsBillUpdateJob represents a row from 'trackit.aws_bill_update_job'.
type AwsBillUpdateJob struct {
	ID                  int       `json:"id"`                     // id
	AwsBillRepositoryID int       `json:"aws_bill_repository_id"` // aws_bill_repository_id
	Expired             time.Time `json:"expired"`                // expired
	Completed           time.Time `json:"completed"`              // completed
	WorkerID            string    `json:"worker_id"`              // worker_id
	Error               string    `json:"error"`                  // error
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the AwsBillUpdateJob exists in the database.
func (abuj *AwsBillUpdateJob) Exists() bool {
	return abuj._exists
}

// Deleted returns true when the AwsBillUpdateJob has been marked for deletion from
// the database.
func (abuj *AwsBillUpdateJob) Deleted() bool {
	return abuj._deleted
}

// Insert inserts the AwsBillUpdateJob to the database.
func (abuj *AwsBillUpdateJob) Insert(db DB) error {
	switch {
	case abuj._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case abuj._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO trackit.aws_bill_update_job (` +
		`aws_bill_repository_id, expired, completed, worker_id, error` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)`
	// run
	logf(sqlstr, abuj.AwsBillRepositoryID, abuj.Expired, abuj.Completed, abuj.WorkerID, abuj.Error)
	res, err := db.Exec(sqlstr, abuj.AwsBillRepositoryID, abuj.Expired, abuj.Completed, abuj.WorkerID, abuj.Error)
	if err != nil {
		return err
	}
	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	} // set primary key
	abuj.ID = int(id)
	// set exists
	abuj._exists = true
	return nil
}

// Update updates a AwsBillUpdateJob in the database.
func (abuj *AwsBillUpdateJob) Update(db DB) error {
	switch {
	case !abuj._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case abuj._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE trackit.aws_bill_update_job SET ` +
		`aws_bill_repository_id = ?, expired = ?, completed = ?, worker_id = ?, error = ? ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, abuj.AwsBillRepositoryID, abuj.Expired, abuj.Completed, abuj.WorkerID, abuj.Error, abuj.ID)
	if _, err := db.Exec(sqlstr, abuj.AwsBillRepositoryID, abuj.Expired, abuj.Completed, abuj.WorkerID, abuj.Error, abuj.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the AwsBillUpdateJob to the database.
func (abuj *AwsBillUpdateJob) Save(db DB) error {
	if abuj.Exists() {
		return abuj.Update(db)
	}
	return abuj.Insert(db)
}

// Upsert performs an upsert for AwsBillUpdateJob.
func (abuj *AwsBillUpdateJob) Upsert(db DB) error {
	switch {
	case abuj._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO trackit.aws_bill_update_job (` +
		`id, aws_bill_repository_id, expired, completed, worker_id, error` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?` +
		`)` +
		` ON DUPLICATE KEY UPDATE ` +
		`aws_bill_repository_id = VALUES(aws_bill_repository_id), expired = VALUES(expired), completed = VALUES(completed), worker_id = VALUES(worker_id), error = VALUES(error)`
	// run
	logf(sqlstr, abuj.ID, abuj.AwsBillRepositoryID, abuj.Expired, abuj.Completed, abuj.WorkerID, abuj.Error)
	if _, err := db.Exec(sqlstr, abuj.ID, abuj.AwsBillRepositoryID, abuj.Expired, abuj.Completed, abuj.WorkerID, abuj.Error); err != nil {
		return err
	}
	// set exists
	abuj._exists = true
	return nil
}

// Delete deletes the AwsBillUpdateJob from the database.
func (abuj *AwsBillUpdateJob) Delete(db DB) error {
	switch {
	case !abuj._exists: // doesn't exist
		return nil
	case abuj._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM trackit.aws_bill_update_job ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, abuj.ID)
	if _, err := db.Exec(sqlstr, abuj.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	abuj._deleted = true
	return nil
}

// AwsBillUpdateJobByID retrieves a row from 'trackit.aws_bill_update_job' as a AwsBillUpdateJob.
//
// Generated from index 'aws_bill_update_job_id_pkey'.
func AwsBillUpdateJobByID(db DB, id int) (*AwsBillUpdateJob, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, aws_bill_repository_id, expired, completed, worker_id, error ` +
		`FROM trackit.aws_bill_update_job ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, id)
	abuj := AwsBillUpdateJob{
		_exists: true,
	}
	if err := db.QueryRow(sqlstr, id).Scan(&abuj.ID, &abuj.AwsBillRepositoryID, &abuj.Expired, &abuj.Completed, &abuj.WorkerID, &abuj.Error); err != nil {
		return nil, logerror(err)
	}
	return &abuj, nil
}

// AwsBillUpdateJobByAwsBillRepositoryID retrieves a row from 'trackit.aws_bill_update_job' as a AwsBillUpdateJob.
//
// Generated from index 'foreign_bill_repository'.
func AwsBillUpdateJobByAwsBillRepositoryID(db DB, awsBillRepositoryID int) ([]*AwsBillUpdateJob, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, aws_bill_repository_id, expired, completed, worker_id, error ` +
		`FROM trackit.aws_bill_update_job ` +
		`WHERE aws_bill_repository_id = ?`
	// run
	logf(sqlstr, awsBillRepositoryID)
	rows, err := db.Query(sqlstr, awsBillRepositoryID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*AwsBillUpdateJob
	for rows.Next() {
		abuj := AwsBillUpdateJob{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&abuj.ID, &abuj.AwsBillRepositoryID, &abuj.Expired, &abuj.Completed, &abuj.WorkerID, &abuj.Error); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &abuj)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// AwsBillRepository returns the AwsBillRepository associated with the AwsBillUpdateJob's (AwsBillRepositoryID).
//
// Generated from foreign key 'aws_bill_update_job_ibfk_1'.
func (abuj *AwsBillUpdateJob) AwsBillRepository(db DB) (*AwsBillRepository, error) {
	return AwsBillRepositoryByID(db, abuj.AwsBillRepositoryID)
}
