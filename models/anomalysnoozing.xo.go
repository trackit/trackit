package models

// Code generated by xo. DO NOT EDIT.

// AnomalySnoozing represents a row from 'trackit.anomaly_snoozing'.
type AnomalySnoozing struct {
	ID        int    `json:"id"`         // id
	UserID    int    `json:"user_id"`    // user_id
	AnomalyID string `json:"anomaly_id"` // anomaly_id
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [AnomalySnoozing] exists in the database.
func (as *AnomalySnoozing) Exists() bool {
	return as._exists
}

// Deleted returns true when the [AnomalySnoozing] has been marked for deletion
// from the database.
func (as *AnomalySnoozing) Deleted() bool {
	return as._deleted
}

// Insert inserts the [AnomalySnoozing] to the database.
func (as *AnomalySnoozing) Insert(db DB) error {
	switch {
	case as._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case as._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO trackit.anomaly_snoozing (` +
		`user_id, anomaly_id` +
		`) VALUES (` +
		`?, ?` +
		`)`
	// run
	logf(sqlstr, as.UserID, as.AnomalyID)
	res, err := db.Exec(sqlstr, as.UserID, as.AnomalyID)
	if err != nil {
		return logerror(err)
	}
	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return logerror(err)
	} // set primary key
	as.ID = int(id)
	// set exists
	as._exists = true
	return nil
}

// Update updates a [AnomalySnoozing] in the database.
func (as *AnomalySnoozing) Update(db DB) error {
	switch {
	case !as._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case as._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE trackit.anomaly_snoozing SET ` +
		`user_id = ?, anomaly_id = ? ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, as.UserID, as.AnomalyID, as.ID)
	if _, err := db.Exec(sqlstr, as.UserID, as.AnomalyID, as.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [AnomalySnoozing] to the database.
func (as *AnomalySnoozing) Save(db DB) error {
	if as.Exists() {
		return as.Update(db)
	}
	return as.Insert(db)
}

// Upsert performs an upsert for [AnomalySnoozing].
func (as *AnomalySnoozing) Upsert(db DB) error {
	switch {
	case as._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO trackit.anomaly_snoozing (` +
		`id, user_id, anomaly_id` +
		`) VALUES (` +
		`?, ?, ?` +
		`)` +
		` ON DUPLICATE KEY UPDATE ` +
		`user_id = VALUES(user_id), anomaly_id = VALUES(anomaly_id)`
	// run
	logf(sqlstr, as.ID, as.UserID, as.AnomalyID)
	if _, err := db.Exec(sqlstr, as.ID, as.UserID, as.AnomalyID); err != nil {
		return logerror(err)
	}
	// set exists
	as._exists = true
	return nil
}

// Delete deletes the [AnomalySnoozing] from the database.
func (as *AnomalySnoozing) Delete(db DB) error {
	switch {
	case !as._exists: // doesn't exist
		return nil
	case as._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM trackit.anomaly_snoozing ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, as.ID)
	if _, err := db.Exec(sqlstr, as.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	as._deleted = true
	return nil
}

// AnomalySnoozingByID retrieves a row from 'trackit.anomaly_snoozing' as a [AnomalySnoozing].
//
// Generated from index 'anomaly_snoozing_id_pkey'.
func AnomalySnoozingByID(db DB, id int) (*AnomalySnoozing, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, user_id, anomaly_id ` +
		`FROM trackit.anomaly_snoozing ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, id)
	as := AnomalySnoozing{
		_exists: true,
	}
	if err := db.QueryRow(sqlstr, id).Scan(&as.ID, &as.UserID, &as.AnomalyID); err != nil {
		return nil, logerror(err)
	}
	return &as, nil
}

// AnomalySnoozingByUserIDAnomalyID retrieves a row from 'trackit.anomaly_snoozing' as a [AnomalySnoozing].
//
// Generated from index 'user_id'.
func AnomalySnoozingByUserIDAnomalyID(db DB, userID int, anomalyID string) (*AnomalySnoozing, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, user_id, anomaly_id ` +
		`FROM trackit.anomaly_snoozing ` +
		`WHERE user_id = ? AND anomaly_id = ?`
	// run
	logf(sqlstr, userID, anomalyID)
	as := AnomalySnoozing{
		_exists: true,
	}
	if err := db.QueryRow(sqlstr, userID, anomalyID).Scan(&as.ID, &as.UserID, &as.AnomalyID); err != nil {
		return nil, logerror(err)
	}
	return &as, nil
}

// User returns the User associated with the [AnomalySnoozing]'s (UserID).
//
// Generated from foreign key 'anomaly_snoozing_ibfk_1'.
func (as *AnomalySnoozing) User(db DB) (*User, error) {
	return UserByID(db, as.UserID)
}
