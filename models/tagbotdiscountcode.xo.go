package models

// Code generated by xo. DO NOT EDIT.

// TagbotDiscountCode represents a row from 'trackit.tagbot_discount_code'.
type TagbotDiscountCode struct {
	ID          int    `json:"id"`          // id
	Code        string `json:"code"`        // code
	Description string `json:"description"` // description
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [TagbotDiscountCode] exists in the database.
func (tdc *TagbotDiscountCode) Exists() bool {
	return tdc._exists
}

// Deleted returns true when the [TagbotDiscountCode] has been marked for deletion
// from the database.
func (tdc *TagbotDiscountCode) Deleted() bool {
	return tdc._deleted
}

// Insert inserts the [TagbotDiscountCode] to the database.
func (tdc *TagbotDiscountCode) Insert(db DB) error {
	switch {
	case tdc._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case tdc._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO trackit.tagbot_discount_code (` +
		`code, description` +
		`) VALUES (` +
		`?, ?` +
		`)`
	// run
	logf(sqlstr, tdc.Code, tdc.Description)
	res, err := db.Exec(sqlstr, tdc.Code, tdc.Description)
	if err != nil {
		return logerror(err)
	}
	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return logerror(err)
	} // set primary key
	tdc.ID = int(id)
	// set exists
	tdc._exists = true
	return nil
}

// Update updates a [TagbotDiscountCode] in the database.
func (tdc *TagbotDiscountCode) Update(db DB) error {
	switch {
	case !tdc._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case tdc._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE trackit.tagbot_discount_code SET ` +
		`code = ?, description = ? ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, tdc.Code, tdc.Description, tdc.ID)
	if _, err := db.Exec(sqlstr, tdc.Code, tdc.Description, tdc.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [TagbotDiscountCode] to the database.
func (tdc *TagbotDiscountCode) Save(db DB) error {
	if tdc.Exists() {
		return tdc.Update(db)
	}
	return tdc.Insert(db)
}

// Upsert performs an upsert for [TagbotDiscountCode].
func (tdc *TagbotDiscountCode) Upsert(db DB) error {
	switch {
	case tdc._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO trackit.tagbot_discount_code (` +
		`id, code, description` +
		`) VALUES (` +
		`?, ?, ?` +
		`)` +
		` ON DUPLICATE KEY UPDATE ` +
		`code = VALUES(code), description = VALUES(description)`
	// run
	logf(sqlstr, tdc.ID, tdc.Code, tdc.Description)
	if _, err := db.Exec(sqlstr, tdc.ID, tdc.Code, tdc.Description); err != nil {
		return logerror(err)
	}
	// set exists
	tdc._exists = true
	return nil
}

// Delete deletes the [TagbotDiscountCode] from the database.
func (tdc *TagbotDiscountCode) Delete(db DB) error {
	switch {
	case !tdc._exists: // doesn't exist
		return nil
	case tdc._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM trackit.tagbot_discount_code ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, tdc.ID)
	if _, err := db.Exec(sqlstr, tdc.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	tdc._deleted = true
	return nil
}

// TagbotDiscountCodeByID retrieves a row from 'trackit.tagbot_discount_code' as a [TagbotDiscountCode].
//
// Generated from index 'tagbot_discount_code_id_pkey'.
func TagbotDiscountCodeByID(db DB, id int) (*TagbotDiscountCode, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, code, description ` +
		`FROM trackit.tagbot_discount_code ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, id)
	tdc := TagbotDiscountCode{
		_exists: true,
	}
	if err := db.QueryRow(sqlstr, id).Scan(&tdc.ID, &tdc.Code, &tdc.Description); err != nil {
		return nil, logerror(err)
	}
	return &tdc, nil
}

// TagbotDiscountCodeByCode retrieves a row from 'trackit.tagbot_discount_code' as a [TagbotDiscountCode].
//
// Generated from index 'unique_code'.
func TagbotDiscountCodeByCode(db DB, code string) (*TagbotDiscountCode, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, code, description ` +
		`FROM trackit.tagbot_discount_code ` +
		`WHERE code = ?`
	// run
	logf(sqlstr, code)
	tdc := TagbotDiscountCode{
		_exists: true,
	}
	if err := db.QueryRow(sqlstr, code).Scan(&tdc.ID, &tdc.Code, &tdc.Description); err != nil {
		return nil, logerror(err)
	}
	return &tdc, nil
}
