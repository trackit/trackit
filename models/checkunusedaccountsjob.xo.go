// Package models contains the types for schema 'trackit'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
	"time"
)

// CheckUnusedAccountsJob represents a row from 'trackit.check_unused_accounts_job'.
type CheckUnusedAccountsJob struct {
	ID        int       `json:"id"`        // id
	Created   time.Time `json:"created"`   // created
	Completed time.Time `json:"completed"` // completed
	WorkerID  string    `json:"worker_id"` // worker_id
	JobError  string    `json:"job_error"` // jobError

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the CheckUnusedAccountsJob exists in the database.
func (cuaj *CheckUnusedAccountsJob) Exists() bool {
	return cuaj._exists
}

// Deleted provides information if the CheckUnusedAccountsJob has been deleted from the database.
func (cuaj *CheckUnusedAccountsJob) Deleted() bool {
	return cuaj._deleted
}

// Insert inserts the CheckUnusedAccountsJob to the database.
func (cuaj *CheckUnusedAccountsJob) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if cuaj._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO trackit.check_unused_accounts_job (` +
		`created, completed, worker_id, job_error` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, cuaj.Created, cuaj.Completed, cuaj.WorkerID, cuaj.JobError)
	res, err := db.Exec(sqlstr, cuaj.Created, cuaj.Completed, cuaj.WorkerID, cuaj.JobError)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	cuaj.ID = int(id)
	cuaj._exists = true

	return nil
}

// Update updates the CheckUnusedAccountsJob in the database.
func (cuaj *CheckUnusedAccountsJob) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !cuaj._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if cuaj._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE trackit.check_unused_accounts_job SET ` +
		`created = ?, completed = ?, worker_id = ?, job_error = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, cuaj.Created, cuaj.Completed, cuaj.WorkerID, cuaj.JobError, cuaj.ID)
	_, err = db.Exec(sqlstr, cuaj.Created, cuaj.Completed, cuaj.WorkerID, cuaj.JobError, cuaj.ID)
	return err
}

// Save saves the CheckUnusedAccountsJob to the database.
func (cuaj *CheckUnusedAccountsJob) Save(db XODB) error {
	if cuaj.Exists() {
		return cuaj.Update(db)
	}

	return cuaj.Insert(db)
}

// Delete deletes the CheckUnusedAccountsJob from the database.
func (cuaj *CheckUnusedAccountsJob) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !cuaj._exists {
		return nil
	}

	// if deleted, bail
	if cuaj._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM trackit.check_unused_accounts_job WHERE id = ?`

	// run query
	XOLog(sqlstr, cuaj.ID)
	_, err = db.Exec(sqlstr, cuaj.ID)
	if err != nil {
		return err
	}

	// set deleted
	cuaj._deleted = true

	return nil
}

// CheckUnusedAccountsJobByID retrieves a row from 'trackit.check_unused_accounts_job' as a CheckUnusedAccountsJob.
//
// Generated from index 'check_unused_accounts_job_id_pkey'.
func CheckUnusedAccountsJobByID(db XODB, id int) (*CheckUnusedAccountsJob, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, created, completed, worker_id, job_error ` +
		`FROM trackit.check_unused_accounts_job ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	cuaj := CheckUnusedAccountsJob{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&cuaj.ID, &cuaj.Created, &cuaj.Completed, &cuaj.WorkerID, &cuaj.JobError)
	if err != nil {
		return nil, err
	}

	return &cuaj, nil
}
