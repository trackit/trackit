package models

// Code generated by xo. DO NOT EDIT.

import (
	"time"
)

// CheckUnusedAccountsJob represents a row from 'trackit.check_unused_accounts_job'.
type CheckUnusedAccountsJob struct {
	ID        int       `json:"id"`        // id
	Completed time.Time `json:"completed"` // completed
	WorkerID  string    `json:"worker_id"` // worker_id
	JobError  string    `json:"job_error"` // job_error
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the CheckUnusedAccountsJob exists in the database.
func (cuaj *CheckUnusedAccountsJob) Exists() bool {
	return cuaj._exists
}

// Deleted returns true when the CheckUnusedAccountsJob has been marked for deletion from
// the database.
func (cuaj *CheckUnusedAccountsJob) Deleted() bool {
	return cuaj._deleted
}

// Insert inserts the CheckUnusedAccountsJob to the database.
func (cuaj *CheckUnusedAccountsJob) Insert(db DB) error {
	switch {
	case cuaj._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case cuaj._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO trackit.check_unused_accounts_job (` +
		`completed, worker_id, job_error` +
		`) VALUES (` +
		`?, ?, ?` +
		`)`
	// run
	logf(sqlstr, cuaj.Completed, cuaj.WorkerID, cuaj.JobError)
	res, err := db.Exec(sqlstr, cuaj.Completed, cuaj.WorkerID, cuaj.JobError)
	if err != nil {
		return err
	}
	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	} // set primary key
	cuaj.ID = int(id)
	// set exists
	cuaj._exists = true
	return nil
}

// Update updates a CheckUnusedAccountsJob in the database.
func (cuaj *CheckUnusedAccountsJob) Update(db DB) error {
	switch {
	case !cuaj._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case cuaj._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE trackit.check_unused_accounts_job SET ` +
		`completed = ?, worker_id = ?, job_error = ? ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, cuaj.Completed, cuaj.WorkerID, cuaj.JobError, cuaj.ID)
	if _, err := db.Exec(sqlstr, cuaj.Completed, cuaj.WorkerID, cuaj.JobError, cuaj.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the CheckUnusedAccountsJob to the database.
func (cuaj *CheckUnusedAccountsJob) Save(db DB) error {
	if cuaj.Exists() {
		return cuaj.Update(db)
	}
	return cuaj.Insert(db)
}

// Upsert performs an upsert for CheckUnusedAccountsJob.
func (cuaj *CheckUnusedAccountsJob) Upsert(db DB) error {
	switch {
	case cuaj._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO trackit.check_unused_accounts_job (` +
		`id, completed, worker_id, job_error` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)` +
		` ON DUPLICATE KEY UPDATE ` +
		`completed = VALUES(completed), worker_id = VALUES(worker_id), job_error = VALUES(job_error)`
	// run
	logf(sqlstr, cuaj.ID, cuaj.Completed, cuaj.WorkerID, cuaj.JobError)
	if _, err := db.Exec(sqlstr, cuaj.ID, cuaj.Completed, cuaj.WorkerID, cuaj.JobError); err != nil {
		return err
	}
	// set exists
	cuaj._exists = true
	return nil
}

// Delete deletes the CheckUnusedAccountsJob from the database.
func (cuaj *CheckUnusedAccountsJob) Delete(db DB) error {
	switch {
	case !cuaj._exists: // doesn't exist
		return nil
	case cuaj._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM trackit.check_unused_accounts_job ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, cuaj.ID)
	if _, err := db.Exec(sqlstr, cuaj.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	cuaj._deleted = true
	return nil
}

// CheckUnusedAccountsJobByID retrieves a row from 'trackit.check_unused_accounts_job' as a CheckUnusedAccountsJob.
//
// Generated from index 'check_unused_accounts_job_id_pkey'.
func CheckUnusedAccountsJobByID(db DB, id int) (*CheckUnusedAccountsJob, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, completed, worker_id, job_error ` +
		`FROM trackit.check_unused_accounts_job ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, id)
	cuaj := CheckUnusedAccountsJob{
		_exists: true,
	}
	if err := db.QueryRow(sqlstr, id).Scan(&cuaj.ID, &cuaj.Completed, &cuaj.WorkerID, &cuaj.JobError); err != nil {
		return nil, logerror(err)
	}
	return &cuaj, nil
}
