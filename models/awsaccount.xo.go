package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"time"
)

// AwsAccount represents a row from 'trackit.aws_account'.
type AwsAccount struct {
	ID                                    int           `json:"id"`                                        // id
	UserID                                int           `json:"user_id"`                                   // user_id
	Pretty                                string        `json:"pretty"`                                    // pretty
	RoleArn                               string        `json:"role_arn"`                                  // role_arn
	External                              string        `json:"external"`                                  // external
	NextUpdate                            time.Time     `json:"next_update"`                               // next_update
	Payer                                 bool          `json:"payer"`                                     // payer
	NextUpdatePlugins                     time.Time     `json:"next_update_plugins"`                       // next_update_plugins
	AwsIdentity                           string        `json:"aws_identity"`                              // aws_identity
	ParentID                              sql.NullInt64 `json:"parent_id"`                                 // parent_id
	LastSpreadsheetReportGeneration       time.Time     `json:"last_spreadsheet_report_generation"`        // last_spreadsheet_report_generation
	NextSpreadsheetReportGeneration       time.Time     `json:"next_spreadsheet_report_generation"`        // next_spreadsheet_report_generation
	NextUpdateAnomaliesDetection          time.Time     `json:"next_update_anomalies_detection"`           // next_update_anomalies_detection
	LastAnomaliesUpdate                   time.Time     `json:"last_anomalies_update"`                     // last_anomalies_update
	LastMasterSpreadsheetReportGeneration time.Time     `json:"last_master_spreadsheet_report_generation"` // last_master_spreadsheet_report_generation
	NextMasterSpreadsheetReportGeneration time.Time     `json:"next_master_spreadsheet_report_generation"` // next_master_spreadsheet_report_generation
	LastTagsSpreadsheetReportGeneration   time.Time     `json:"last_tags_spreadsheet_report_generation"`   // last_tags_spreadsheet_report_generation
	NextTagsSpreadsheetReportGeneration   time.Time     `json:"next_tags_spreadsheet_report_generation"`   // next_tags_spreadsheet_report_generation
	NeedsTagbotOnboarding                 bool          `json:"needs_tagbot_onboarding"`                   // needs_tagbot_onboarding
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the AwsAccount exists in the database.
func (aa *AwsAccount) Exists() bool {
	return aa._exists
}

// Deleted returns true when the AwsAccount has been marked for deletion from
// the database.
func (aa *AwsAccount) Deleted() bool {
	return aa._deleted
}

// Insert inserts the AwsAccount to the database.
func (aa *AwsAccount) Insert(db DB) error {
	switch {
	case aa._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case aa._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO trackit.aws_account (` +
		`user_id, pretty, role_arn, external, next_update, payer, next_update_plugins, aws_identity, parent_id, last_spreadsheet_report_generation, next_spreadsheet_report_generation, next_update_anomalies_detection, last_anomalies_update, last_master_spreadsheet_report_generation, next_master_spreadsheet_report_generation, last_tags_spreadsheet_report_generation, next_tags_spreadsheet_report_generation, needs_tagbot_onboarding` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`
	// run
	logf(sqlstr, aa.UserID, aa.Pretty, aa.RoleArn, aa.External, aa.NextUpdate, aa.Payer, aa.NextUpdatePlugins, aa.AwsIdentity, aa.ParentID, aa.LastSpreadsheetReportGeneration, aa.NextSpreadsheetReportGeneration, aa.NextUpdateAnomaliesDetection, aa.LastAnomaliesUpdate, aa.LastMasterSpreadsheetReportGeneration, aa.NextMasterSpreadsheetReportGeneration, aa.LastTagsSpreadsheetReportGeneration, aa.NextTagsSpreadsheetReportGeneration, aa.NeedsTagbotOnboarding)
	res, err := db.Exec(sqlstr, aa.UserID, aa.Pretty, aa.RoleArn, aa.External, aa.NextUpdate, aa.Payer, aa.NextUpdatePlugins, aa.AwsIdentity, aa.ParentID, aa.LastSpreadsheetReportGeneration, aa.NextSpreadsheetReportGeneration, aa.NextUpdateAnomaliesDetection, aa.LastAnomaliesUpdate, aa.LastMasterSpreadsheetReportGeneration, aa.NextMasterSpreadsheetReportGeneration, aa.LastTagsSpreadsheetReportGeneration, aa.NextTagsSpreadsheetReportGeneration, aa.NeedsTagbotOnboarding)
	if err != nil {
		return err
	}
	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	} // set primary key
	aa.ID = int(id)
	// set exists
	aa._exists = true
	return nil
}

// Update updates a AwsAccount in the database.
func (aa *AwsAccount) Update(db DB) error {
	switch {
	case !aa._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case aa._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE trackit.aws_account SET ` +
		`user_id = ?, pretty = ?, role_arn = ?, external = ?, next_update = ?, payer = ?, next_update_plugins = ?, aws_identity = ?, parent_id = ?, last_spreadsheet_report_generation = ?, next_spreadsheet_report_generation = ?, next_update_anomalies_detection = ?, last_anomalies_update = ?, last_master_spreadsheet_report_generation = ?, next_master_spreadsheet_report_generation = ?, last_tags_spreadsheet_report_generation = ?, next_tags_spreadsheet_report_generation = ?, needs_tagbot_onboarding = ? ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, aa.UserID, aa.Pretty, aa.RoleArn, aa.External, aa.NextUpdate, aa.Payer, aa.NextUpdatePlugins, aa.AwsIdentity, aa.ParentID, aa.LastSpreadsheetReportGeneration, aa.NextSpreadsheetReportGeneration, aa.NextUpdateAnomaliesDetection, aa.LastAnomaliesUpdate, aa.LastMasterSpreadsheetReportGeneration, aa.NextMasterSpreadsheetReportGeneration, aa.LastTagsSpreadsheetReportGeneration, aa.NextTagsSpreadsheetReportGeneration, aa.NeedsTagbotOnboarding, aa.ID)
	if _, err := db.Exec(sqlstr, aa.UserID, aa.Pretty, aa.RoleArn, aa.External, aa.NextUpdate, aa.Payer, aa.NextUpdatePlugins, aa.AwsIdentity, aa.ParentID, aa.LastSpreadsheetReportGeneration, aa.NextSpreadsheetReportGeneration, aa.NextUpdateAnomaliesDetection, aa.LastAnomaliesUpdate, aa.LastMasterSpreadsheetReportGeneration, aa.NextMasterSpreadsheetReportGeneration, aa.LastTagsSpreadsheetReportGeneration, aa.NextTagsSpreadsheetReportGeneration, aa.NeedsTagbotOnboarding, aa.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the AwsAccount to the database.
func (aa *AwsAccount) Save(db DB) error {
	if aa.Exists() {
		return aa.Update(db)
	}
	return aa.Insert(db)
}

// Upsert performs an upsert for AwsAccount.
func (aa *AwsAccount) Upsert(db DB) error {
	switch {
	case aa._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO trackit.aws_account (` +
		`id, user_id, pretty, role_arn, external, next_update, payer, next_update_plugins, aws_identity, parent_id, last_spreadsheet_report_generation, next_spreadsheet_report_generation, next_update_anomalies_detection, last_anomalies_update, last_master_spreadsheet_report_generation, next_master_spreadsheet_report_generation, last_tags_spreadsheet_report_generation, next_tags_spreadsheet_report_generation, needs_tagbot_onboarding` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)` +
		` ON DUPLICATE KEY UPDATE ` +
		`user_id = VALUES(user_id), pretty = VALUES(pretty), role_arn = VALUES(role_arn), external = VALUES(external), next_update = VALUES(next_update), payer = VALUES(payer), next_update_plugins = VALUES(next_update_plugins), aws_identity = VALUES(aws_identity), parent_id = VALUES(parent_id), last_spreadsheet_report_generation = VALUES(last_spreadsheet_report_generation), next_spreadsheet_report_generation = VALUES(next_spreadsheet_report_generation), next_update_anomalies_detection = VALUES(next_update_anomalies_detection), last_anomalies_update = VALUES(last_anomalies_update), last_master_spreadsheet_report_generation = VALUES(last_master_spreadsheet_report_generation), next_master_spreadsheet_report_generation = VALUES(next_master_spreadsheet_report_generation), last_tags_spreadsheet_report_generation = VALUES(last_tags_spreadsheet_report_generation), next_tags_spreadsheet_report_generation = VALUES(next_tags_spreadsheet_report_generation), needs_tagbot_onboarding = VALUES(needs_tagbot_onboarding)`
	// run
	logf(sqlstr, aa.ID, aa.UserID, aa.Pretty, aa.RoleArn, aa.External, aa.NextUpdate, aa.Payer, aa.NextUpdatePlugins, aa.AwsIdentity, aa.ParentID, aa.LastSpreadsheetReportGeneration, aa.NextSpreadsheetReportGeneration, aa.NextUpdateAnomaliesDetection, aa.LastAnomaliesUpdate, aa.LastMasterSpreadsheetReportGeneration, aa.NextMasterSpreadsheetReportGeneration, aa.LastTagsSpreadsheetReportGeneration, aa.NextTagsSpreadsheetReportGeneration, aa.NeedsTagbotOnboarding)
	if _, err := db.Exec(sqlstr, aa.ID, aa.UserID, aa.Pretty, aa.RoleArn, aa.External, aa.NextUpdate, aa.Payer, aa.NextUpdatePlugins, aa.AwsIdentity, aa.ParentID, aa.LastSpreadsheetReportGeneration, aa.NextSpreadsheetReportGeneration, aa.NextUpdateAnomaliesDetection, aa.LastAnomaliesUpdate, aa.LastMasterSpreadsheetReportGeneration, aa.NextMasterSpreadsheetReportGeneration, aa.LastTagsSpreadsheetReportGeneration, aa.NextTagsSpreadsheetReportGeneration, aa.NeedsTagbotOnboarding); err != nil {
		return err
	}
	// set exists
	aa._exists = true
	return nil
}

// Delete deletes the AwsAccount from the database.
func (aa *AwsAccount) Delete(db DB) error {
	switch {
	case !aa._exists: // doesn't exist
		return nil
	case aa._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM trackit.aws_account ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, aa.ID)
	if _, err := db.Exec(sqlstr, aa.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	aa._deleted = true
	return nil
}

// AwsAccountByID retrieves a row from 'trackit.aws_account' as a AwsAccount.
//
// Generated from index 'aws_account_id_pkey'.
func AwsAccountByID(db DB, id int) (*AwsAccount, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, user_id, pretty, role_arn, external, next_update, payer, next_update_plugins, aws_identity, parent_id, last_spreadsheet_report_generation, next_spreadsheet_report_generation, next_update_anomalies_detection, last_anomalies_update, last_master_spreadsheet_report_generation, next_master_spreadsheet_report_generation, last_tags_spreadsheet_report_generation, next_tags_spreadsheet_report_generation, needs_tagbot_onboarding ` +
		`FROM trackit.aws_account ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, id)
	aa := AwsAccount{
		_exists: true,
	}
	if err := db.QueryRow(sqlstr, id).Scan(&aa.ID, &aa.UserID, &aa.Pretty, &aa.RoleArn, &aa.External, &aa.NextUpdate, &aa.Payer, &aa.NextUpdatePlugins, &aa.AwsIdentity, &aa.ParentID, &aa.LastSpreadsheetReportGeneration, &aa.NextSpreadsheetReportGeneration, &aa.NextUpdateAnomaliesDetection, &aa.LastAnomaliesUpdate, &aa.LastMasterSpreadsheetReportGeneration, &aa.NextMasterSpreadsheetReportGeneration, &aa.LastTagsSpreadsheetReportGeneration, &aa.NextTagsSpreadsheetReportGeneration, &aa.NeedsTagbotOnboarding); err != nil {
		return nil, logerror(err)
	}
	return &aa, nil
}

// AwsAccountByUserID retrieves a row from 'trackit.aws_account' as a AwsAccount.
//
// Generated from index 'foreign_user'.
func AwsAccountByUserID(db DB, userID int) ([]*AwsAccount, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, user_id, pretty, role_arn, external, next_update, payer, next_update_plugins, aws_identity, parent_id, last_spreadsheet_report_generation, next_spreadsheet_report_generation, next_update_anomalies_detection, last_anomalies_update, last_master_spreadsheet_report_generation, next_master_spreadsheet_report_generation, last_tags_spreadsheet_report_generation, next_tags_spreadsheet_report_generation, needs_tagbot_onboarding ` +
		`FROM trackit.aws_account ` +
		`WHERE user_id = ?`
	// run
	logf(sqlstr, userID)
	rows, err := db.Query(sqlstr, userID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*AwsAccount
	for rows.Next() {
		aa := AwsAccount{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&aa.ID, &aa.UserID, &aa.Pretty, &aa.RoleArn, &aa.External, &aa.NextUpdate, &aa.Payer, &aa.NextUpdatePlugins, &aa.AwsIdentity, &aa.ParentID, &aa.LastSpreadsheetReportGeneration, &aa.NextSpreadsheetReportGeneration, &aa.NextUpdateAnomaliesDetection, &aa.LastAnomaliesUpdate, &aa.LastMasterSpreadsheetReportGeneration, &aa.NextMasterSpreadsheetReportGeneration, &aa.LastTagsSpreadsheetReportGeneration, &aa.NextTagsSpreadsheetReportGeneration, &aa.NeedsTagbotOnboarding); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &aa)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// User returns the User associated with the AwsAccount's (UserID).
//
// Generated from foreign key 'aws_account_ibfk_1'.
func (aa *AwsAccount) User(db DB) (*User, error) {
	return UserByID(db, aa.UserID)
}
