package models

// Code generated by xo. DO NOT EDIT.

// ForgottenPassword represents a row from 'trackit.forgotten_password'.
type ForgottenPassword struct {
	ID     int    `json:"id"`      // id
	UserID int    `json:"user_id"` // user_id
	Token  string `json:"token"`   // token
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [ForgottenPassword] exists in the database.
func (fp *ForgottenPassword) Exists() bool {
	return fp._exists
}

// Deleted returns true when the [ForgottenPassword] has been marked for deletion
// from the database.
func (fp *ForgottenPassword) Deleted() bool {
	return fp._deleted
}

// Insert inserts the [ForgottenPassword] to the database.
func (fp *ForgottenPassword) Insert(db DB) error {
	switch {
	case fp._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case fp._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO trackit.forgotten_password (` +
		`user_id, token` +
		`) VALUES (` +
		`?, ?` +
		`)`
	// run
	logf(sqlstr, fp.UserID, fp.Token)
	res, err := db.Exec(sqlstr, fp.UserID, fp.Token)
	if err != nil {
		return logerror(err)
	}
	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return logerror(err)
	} // set primary key
	fp.ID = int(id)
	// set exists
	fp._exists = true
	return nil
}

// Update updates a [ForgottenPassword] in the database.
func (fp *ForgottenPassword) Update(db DB) error {
	switch {
	case !fp._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case fp._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE trackit.forgotten_password SET ` +
		`user_id = ?, token = ? ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, fp.UserID, fp.Token, fp.ID)
	if _, err := db.Exec(sqlstr, fp.UserID, fp.Token, fp.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [ForgottenPassword] to the database.
func (fp *ForgottenPassword) Save(db DB) error {
	if fp.Exists() {
		return fp.Update(db)
	}
	return fp.Insert(db)
}

// Upsert performs an upsert for [ForgottenPassword].
func (fp *ForgottenPassword) Upsert(db DB) error {
	switch {
	case fp._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO trackit.forgotten_password (` +
		`id, user_id, token` +
		`) VALUES (` +
		`?, ?, ?` +
		`)` +
		` ON DUPLICATE KEY UPDATE ` +
		`user_id = VALUES(user_id), token = VALUES(token)`
	// run
	logf(sqlstr, fp.ID, fp.UserID, fp.Token)
	if _, err := db.Exec(sqlstr, fp.ID, fp.UserID, fp.Token); err != nil {
		return logerror(err)
	}
	// set exists
	fp._exists = true
	return nil
}

// Delete deletes the [ForgottenPassword] from the database.
func (fp *ForgottenPassword) Delete(db DB) error {
	switch {
	case !fp._exists: // doesn't exist
		return nil
	case fp._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM trackit.forgotten_password ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, fp.ID)
	if _, err := db.Exec(sqlstr, fp.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	fp._deleted = true
	return nil
}

// ForgottenPasswordByUserID retrieves a row from 'trackit.forgotten_password' as a [ForgottenPassword].
//
// Generated from index 'foreign_user'.
func ForgottenPasswordByUserID(db DB, userID int) ([]*ForgottenPassword, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, user_id, token ` +
		`FROM trackit.forgotten_password ` +
		`WHERE user_id = ?`
	// run
	logf(sqlstr, userID)
	rows, err := db.Query(sqlstr, userID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*ForgottenPassword
	for rows.Next() {
		fp := ForgottenPassword{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&fp.ID, &fp.UserID, &fp.Token); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &fp)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// ForgottenPasswordByID retrieves a row from 'trackit.forgotten_password' as a [ForgottenPassword].
//
// Generated from index 'forgotten_password_id_pkey'.
func ForgottenPasswordByID(db DB, id int) (*ForgottenPassword, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, user_id, token ` +
		`FROM trackit.forgotten_password ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, id)
	fp := ForgottenPassword{
		_exists: true,
	}
	if err := db.QueryRow(sqlstr, id).Scan(&fp.ID, &fp.UserID, &fp.Token); err != nil {
		return nil, logerror(err)
	}
	return &fp, nil
}

// User returns the User associated with the [ForgottenPassword]'s (UserID).
//
// Generated from foreign key 'forgotten_password_ibfk_1'.
func (fp *ForgottenPassword) User(db DB) (*User, error) {
	return UserByID(db, fp.UserID)
}
