package models

// Code generated by xo. DO NOT EDIT.

import (
	"time"
)

// AwsBillRepository represents a row from 'trackit.aws_bill_repository'.
type AwsBillRepository struct {
	ID                   int       `json:"id"`                     // id
	Created              time.Time `json:"created"`                // created
	AwsAccountID         int       `json:"aws_account_id"`         // aws_account_id
	Bucket               string    `json:"bucket"`                 // bucket
	Prefix               string    `json:"prefix"`                 // prefix
	NextUpdate           time.Time `json:"next_update"`            // next_update
	LastImportedManifest time.Time `json:"last_imported_manifest"` // last_imported_manifest
	Error                string    `json:"error"`                  // error
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [AwsBillRepository] exists in the database.
func (abr *AwsBillRepository) Exists() bool {
	return abr._exists
}

// Deleted returns true when the [AwsBillRepository] has been marked for deletion
// from the database.
func (abr *AwsBillRepository) Deleted() bool {
	return abr._deleted
}

// Insert inserts the [AwsBillRepository] to the database.
func (abr *AwsBillRepository) Insert(db DB) error {
	switch {
	case abr._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case abr._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO trackit.aws_bill_repository (` +
		`created, aws_account_id, bucket, prefix, next_update, last_imported_manifest, error` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?` +
		`)`
	// run
	logf(sqlstr, abr.Created, abr.AwsAccountID, abr.Bucket, abr.Prefix, abr.NextUpdate, abr.LastImportedManifest, abr.Error)
	res, err := db.Exec(sqlstr, abr.Created, abr.AwsAccountID, abr.Bucket, abr.Prefix, abr.NextUpdate, abr.LastImportedManifest, abr.Error)
	if err != nil {
		return logerror(err)
	}
	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return logerror(err)
	} // set primary key
	abr.ID = int(id)
	// set exists
	abr._exists = true
	return nil
}

// Update updates a [AwsBillRepository] in the database.
func (abr *AwsBillRepository) Update(db DB) error {
	switch {
	case !abr._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case abr._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE trackit.aws_bill_repository SET ` +
		`created = ?, aws_account_id = ?, bucket = ?, prefix = ?, next_update = ?, last_imported_manifest = ?, error = ? ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, abr.Created, abr.AwsAccountID, abr.Bucket, abr.Prefix, abr.NextUpdate, abr.LastImportedManifest, abr.Error, abr.ID)
	if _, err := db.Exec(sqlstr, abr.Created, abr.AwsAccountID, abr.Bucket, abr.Prefix, abr.NextUpdate, abr.LastImportedManifest, abr.Error, abr.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [AwsBillRepository] to the database.
func (abr *AwsBillRepository) Save(db DB) error {
	if abr.Exists() {
		return abr.Update(db)
	}
	return abr.Insert(db)
}

// Upsert performs an upsert for [AwsBillRepository].
func (abr *AwsBillRepository) Upsert(db DB) error {
	switch {
	case abr._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO trackit.aws_bill_repository (` +
		`id, created, aws_account_id, bucket, prefix, next_update, last_imported_manifest, error` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?` +
		`)` +
		` ON DUPLICATE KEY UPDATE ` +
		`created = VALUES(created), aws_account_id = VALUES(aws_account_id), bucket = VALUES(bucket), prefix = VALUES(prefix), next_update = VALUES(next_update), last_imported_manifest = VALUES(last_imported_manifest), error = VALUES(error)`
	// run
	logf(sqlstr, abr.ID, abr.Created, abr.AwsAccountID, abr.Bucket, abr.Prefix, abr.NextUpdate, abr.LastImportedManifest, abr.Error)
	if _, err := db.Exec(sqlstr, abr.ID, abr.Created, abr.AwsAccountID, abr.Bucket, abr.Prefix, abr.NextUpdate, abr.LastImportedManifest, abr.Error); err != nil {
		return logerror(err)
	}
	// set exists
	abr._exists = true
	return nil
}

// Delete deletes the [AwsBillRepository] from the database.
func (abr *AwsBillRepository) Delete(db DB) error {
	switch {
	case !abr._exists: // doesn't exist
		return nil
	case abr._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM trackit.aws_bill_repository ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, abr.ID)
	if _, err := db.Exec(sqlstr, abr.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	abr._deleted = true
	return nil
}

// AwsBillRepositoryByID retrieves a row from 'trackit.aws_bill_repository' as a [AwsBillRepository].
//
// Generated from index 'aws_bill_repository_id_pkey'.
func AwsBillRepositoryByID(db DB, id int) (*AwsBillRepository, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, created, aws_account_id, bucket, prefix, next_update, last_imported_manifest, error ` +
		`FROM trackit.aws_bill_repository ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, id)
	abr := AwsBillRepository{
		_exists: true,
	}
	if err := db.QueryRow(sqlstr, id).Scan(&abr.ID, &abr.Created, &abr.AwsAccountID, &abr.Bucket, &abr.Prefix, &abr.NextUpdate, &abr.LastImportedManifest, &abr.Error); err != nil {
		return nil, logerror(err)
	}
	return &abr, nil
}

// AwsBillRepositoryByAwsAccountID retrieves a row from 'trackit.aws_bill_repository' as a [AwsBillRepository].
//
// Generated from index 'foreign_aws_account'.
func AwsBillRepositoryByAwsAccountID(db DB, awsAccountID int) ([]*AwsBillRepository, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, created, aws_account_id, bucket, prefix, next_update, last_imported_manifest, error ` +
		`FROM trackit.aws_bill_repository ` +
		`WHERE aws_account_id = ?`
	// run
	logf(sqlstr, awsAccountID)
	rows, err := db.Query(sqlstr, awsAccountID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*AwsBillRepository
	for rows.Next() {
		abr := AwsBillRepository{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&abr.ID, &abr.Created, &abr.AwsAccountID, &abr.Bucket, &abr.Prefix, &abr.NextUpdate, &abr.LastImportedManifest, &abr.Error); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &abr)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// AwsAccount returns the AwsAccount associated with the [AwsBillRepository]'s (AwsAccountID).
//
// Generated from foreign key 'aws_bill_repository_ibfk_1'.
func (abr *AwsBillRepository) AwsAccount(db DB) (*AwsAccount, error) {
	return AwsAccountByID(db, abr.AwsAccountID)
}
