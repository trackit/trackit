package models

// Code generated by xo. DO NOT EDIT.

import (
	"time"
)

// UserOnboardTagbotJob represents a row from 'trackit.user_onboard_tagbot_job'.
type UserOnboardTagbotJob struct {
	ID        int       `json:"id"`        // id
	UserID    int       `json:"user_id"`   // user_id
	Completed time.Time `json:"completed"` // completed
	WorkerID  string    `json:"worker_id"` // worker_id
	JobError  string    `json:"job_error"` // job_error
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the UserOnboardTagbotJob exists in the database.
func (uotj *UserOnboardTagbotJob) Exists() bool {
	return uotj._exists
}

// Deleted returns true when the UserOnboardTagbotJob has been marked for deletion from
// the database.
func (uotj *UserOnboardTagbotJob) Deleted() bool {
	return uotj._deleted
}

// Insert inserts the UserOnboardTagbotJob to the database.
func (uotj *UserOnboardTagbotJob) Insert(db DB) error {
	switch {
	case uotj._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case uotj._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO trackit.user_onboard_tagbot_job (` +
		`user_id, completed, worker_id, job_error` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)`
	// run
	logf(sqlstr, uotj.UserID, uotj.Completed, uotj.WorkerID, uotj.JobError)
	res, err := db.Exec(sqlstr, uotj.UserID, uotj.Completed, uotj.WorkerID, uotj.JobError)
	if err != nil {
		return err
	}
	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	} // set primary key
	uotj.ID = int(id)
	// set exists
	uotj._exists = true
	return nil
}

// Update updates a UserOnboardTagbotJob in the database.
func (uotj *UserOnboardTagbotJob) Update(db DB) error {
	switch {
	case !uotj._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case uotj._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE trackit.user_onboard_tagbot_job SET ` +
		`user_id = ?, completed = ?, worker_id = ?, job_error = ? ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, uotj.UserID, uotj.Completed, uotj.WorkerID, uotj.JobError, uotj.ID)
	if _, err := db.Exec(sqlstr, uotj.UserID, uotj.Completed, uotj.WorkerID, uotj.JobError, uotj.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the UserOnboardTagbotJob to the database.
func (uotj *UserOnboardTagbotJob) Save(db DB) error {
	if uotj.Exists() {
		return uotj.Update(db)
	}
	return uotj.Insert(db)
}

// Upsert performs an upsert for UserOnboardTagbotJob.
func (uotj *UserOnboardTagbotJob) Upsert(db DB) error {
	switch {
	case uotj._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO trackit.user_onboard_tagbot_job (` +
		`id, user_id, completed, worker_id, job_error` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)` +
		` ON DUPLICATE KEY UPDATE ` +
		`user_id = VALUES(user_id), completed = VALUES(completed), worker_id = VALUES(worker_id), job_error = VALUES(job_error)`
	// run
	logf(sqlstr, uotj.ID, uotj.UserID, uotj.Completed, uotj.WorkerID, uotj.JobError)
	if _, err := db.Exec(sqlstr, uotj.ID, uotj.UserID, uotj.Completed, uotj.WorkerID, uotj.JobError); err != nil {
		return err
	}
	// set exists
	uotj._exists = true
	return nil
}

// Delete deletes the UserOnboardTagbotJob from the database.
func (uotj *UserOnboardTagbotJob) Delete(db DB) error {
	switch {
	case !uotj._exists: // doesn't exist
		return nil
	case uotj._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM trackit.user_onboard_tagbot_job ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, uotj.ID)
	if _, err := db.Exec(sqlstr, uotj.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	uotj._deleted = true
	return nil
}

// UserOnboardTagbotJobByUserID retrieves a row from 'trackit.user_onboard_tagbot_job' as a UserOnboardTagbotJob.
//
// Generated from index 'foreign_user'.
func UserOnboardTagbotJobByUserID(db DB, userID int) ([]*UserOnboardTagbotJob, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, user_id, completed, worker_id, job_error ` +
		`FROM trackit.user_onboard_tagbot_job ` +
		`WHERE user_id = ?`
	// run
	logf(sqlstr, userID)
	rows, err := db.Query(sqlstr, userID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*UserOnboardTagbotJob
	for rows.Next() {
		uotj := UserOnboardTagbotJob{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&uotj.ID, &uotj.UserID, &uotj.Completed, &uotj.WorkerID, &uotj.JobError); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &uotj)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// UserOnboardTagbotJobByID retrieves a row from 'trackit.user_onboard_tagbot_job' as a UserOnboardTagbotJob.
//
// Generated from index 'user_onboard_tagbot_job_id_pkey'.
func UserOnboardTagbotJobByID(db DB, id int) (*UserOnboardTagbotJob, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, user_id, completed, worker_id, job_error ` +
		`FROM trackit.user_onboard_tagbot_job ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, id)
	uotj := UserOnboardTagbotJob{
		_exists: true,
	}
	if err := db.QueryRow(sqlstr, id).Scan(&uotj.ID, &uotj.UserID, &uotj.Completed, &uotj.WorkerID, &uotj.JobError); err != nil {
		return nil, logerror(err)
	}
	return &uotj, nil
}

// User returns the User associated with the UserOnboardTagbotJob's (UserID).
//
// Generated from foreign key 'user_onboard_tagbot_job_ibfk_1'.
func (uotj *UserOnboardTagbotJob) User(db DB) (*User, error) {
	return UserByID(db, uotj.UserID)
}
